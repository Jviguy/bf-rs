use bf_macros::bf;

#[inline(never)]
pub fn run_transpiled_hello_world() -> String {
    bf!(<u8, 30000, 0>
        ++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.
        >---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.
    )
}

fn main() {
    // You can call it from main
    println!("{}", run_transpiled_hello_world());
}

#[cfg(test)]
mod tests {
    use bf_macros::const_bf;
    use crate::run_transpiled_hello_world;

    #[test]
    fn hello_world_const() {
        let hello_world = run_transpiled_hello_world();
        assert_eq!(hello_world, "Hello World!\n");
    }

    #[test]
    fn ninety_nine_bottles_of_beer_const() {
        /*
        Source:
          99 bottles in 1752 brainfuck instructions
          by jim crawford (http://www.goombas.org/)
         */
        let bf_chanty = const_bf!(<u8, 30000, 0>
            >++++++++++[<++++++++++>-]<->>>>>+++[>+++>+++<<-]<<<<+<[>[>+
            >+<<-]>>[-<<+>>]++++>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<[[-]>>
            >>>>[[-]<++++++++++<->>]<-[>+>+<<-]>[<+>-]+>[[-]<->]<<<<<<<<
            <->>]<[>+>+<<-]>>[-<<+>>]+>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<
            <[>>+>+<<<-]>>>[-<<<+>>>]++>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<
            <[>+<[-]]<[>>+<<[-]]>>[<<+>>[-]]<<<[>>+>+<<<-]>>>[-<<<+>>>]+
            +++>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<[>+<[-]]<[>>+<<[-]]>>[<
            <+>>[-]]<<[[-]>>>++++++++[>>++++++<<-]>[<++++++++[>++++++<-]
            >.<++++++++[>------<-]>[<<+>>-]]>.<<++++++++[>>------<<-]<[-
            >>+<<]<++++++++[<++++>-]<.>+++++++[>+++++++++<-]>+++.<+++++[
            >+++++++++<-]>.+++++..--------.-------.++++++++++++++>>[>>>+
            >+<<<<-]>>>>[-<<<<+>>>>]>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<<<
            [>>>+>+<<<<-]>>>>[-<<<<+>>>>]+>+<[-<->]<[[-]>>-<<]>>[[-]<<+>
            >]<<<[>>+<<[-]]>[>+<[-]]++>>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<
            +<[[-]>-<]>[<<<<<<<.>>>>>>>[-]]<<<<<<<<<.>>----.---------.<<
            .>>----.+++..+++++++++++++.[-]<<[-]]<[>+>+<<-]>>[-<<+>>]+>+<
            [-<->]<[[-]>>-<<]>>[[-]<<+>>]<<<[>>+>+<<<-]>>>[-<<<+>>>]++++
            >+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<[>+<[-]]<[>>+<<[-]]>>[<<+>
            >[-]]<<[[-]>++++++++[<++++>-]<.>++++++++++[>+++++++++++<-]>+
            .-.<<.>>++++++.------------.---.<<.>++++++[>+++<-]>.<++++++[
            >----<-]>++.+++++++++++..[-]<<[-]++++++++++.[-]]<[>+>+<<-]>>
            [-<<+>>]+++>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<[[-]++++++++++.
            >+++++++++[>+++++++++<-]>+++.+++++++++++++.++++++++++.------
            .<++++++++[>>++++<<-]>>.<++++++++++.-.---------.>.<-.+++++++
            ++++.++++++++.---------.>.<-------------.+++++++++++++.-----
            -----.>.<++++++++++++.---------------.<+++[>++++++<-]>..>.<-
            ---------.+++++++++++.>.<<+++[>------<-]>-.+++++++++++++++++
            .---.++++++.-------.----------.[-]>[-]<<<.[-]]<[>+>+<<-]>>[-
            <<+>>]++++>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<[[-]++++++++++.[
            -]<[-]>]<+<]
        );
        assert_eq!(bf_chanty, chanty(99));
    }
    // my own impl of the poem to check against.
    fn chanty(n: usize) -> String {
        // you can do a rough guess here. (2 + length) * n in chars of each lines.
        // the 81 comes from the poem base case without the digits of the numbers
        // and not considering s vs no s.
        // its fine because the digits decrease so using smallest will limit the reallocs.
        // reasonably.
        let mut res = String::with_capacity((2 + 81) * n);
        for i in (1..=n).rev() {
            res.push_str(
                &format!(
                    "{0} {1} of beer on the wall\n{0} {1} of beer\
                    \nTake one down and pass it around\n{2} {3} of beer on the wall\n\n",
                    i,
                    if i != 1 { "Bottles" } else { "Bottle" } ,
                    i - 1,
                    if i - 1 != 1 { "Bottles" } else { "Bottle" }
                )
            )
        }
        res
    }
}